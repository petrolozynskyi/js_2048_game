{"version":3,"sources":["scripts/main.js"],"names":["document","addEventListener","gridDisplay","querySelector","scoreDisplay","getElementById","resultDisplay","newGameButton","squares","width","score","generate","emptySquares","filter","square","innerHTML","length","checkForGameOver","checkForWin","randomIndex","Math","floor","random","newValue","handleNewGameClick","resetGame","i","innterHTML","clearStyles","style","backgroundColor","addColours","control","createBoard","createElement","appendChild","push","BOARD_SIZE","ROW_SIZE","moveRight","totalOne","totalTwo","totalThree","totalFour","filteredRow","parseInt","num","missing","newRow","Array","fill","concat","moveLeft","zeros","moveUp","filteredColumn","newColumn","moveDown","combineRow","combinedTotal","combineColumn","e","keyCode","keyLeft","previousState","getGameState","currentState","compareStates","keyUp","keyRight","keyDown","value","removeEventListener","setTimeout","clearInterval","myTimer","canMove","currentSquare","rightSquare","leftSquare","upSquare","downSquare","getColor","color","colorMap","map","state1","state2","join","updateColors"],"mappings":"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","file":"main.0c38a0fa.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const gridDisplay = document.querySelector('.grid');\n  const scoreDisplay = document.getElementById('score');\n  const resultDisplay = document.getElementById('result');\n  const newGameButton = document.getElementById('new-game');\n  const squares = [];\n  const width = 4;\n  let score = 0;\n\n  function resetGame() {\n    for (let i = 0; i < squares.length; i++) {\n      squares[i].innerHTML = 0;\n    }\n    score = 0;\n    scoreDisplay.innerHTML = score;\n    resultDisplay.innterHTML = `Join the numbers and get to the <b>2048</b> tile!`;\n    generate();\n    generate();\n  }\n\n  function clearStyles() {\n    for (let i = 0; i < squares.length; i++) {\n      squares[i].style.backgroundColor = '#afa192';\n    }\n  }\n\n  function handleNewGameClick() {\n    resetGame();\n    clearStyles();\n    addColours();\n    document.addEventListener('keyup', control);\n  }\n\n  newGameButton.addEventListener('click', handleNewGameClick);\n\n  function createBoard() {\n    for (let i = 0; i < width * width; i++) {\n      const square = document.createElement('div');\n\n      square.innerHTML = '0';\n      gridDisplay.appendChild(square);\n      squares.push(square);\n    }\n    generate();\n    generate();\n  }\n  createBoard();\n\n  function generate() {\n    const emptySquares = squares.filter(square => square.innerHTML === '0');\n\n    if (emptySquares.length === 0) {\n      checkForGameOver();\n      checkForWin();\n\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptySquares.length);\n    const newValue = Math.random() < 0.9 ? '2' : '4'; // 90% chance for '2', 10% chance for '4'\n\n    emptySquares[randomIndex].innerHTML = newValue;\n    checkForGameOver();\n  }\n\n  const BOARD_SIZE = 4;\n  const ROW_SIZE = 4;\n\n  function moveRight() {\n    for (let i = 0; i < BOARD_SIZE * ROW_SIZE; i++) {\n      if (i % 4 === 0) {\n        const totalOne = squares[i].innerHTML;\n        const totalTwo = squares[i + 1].innerHTML;\n        const totalThree = squares[i + 2].innerHTML;\n        const totalFour = squares[i + 3].innerHTML;\n        const row = [parseInt(totalOne), parseInt(totalTwo), parseInt(totalThree), parseInt(totalFour)];\n\n        const filteredRow = row.filter(num => num);\n        const missing = ROW_SIZE - filteredRow.length;\n        const zeros = Array(missing).fill(0);\n        const newRow = zeros.concat(filteredRow);\n\n        squares[i].innerHTML = newRow[0];\n        squares[i + 1].innerHTML = newRow[1];\n        squares[i + 2].innerHTML = newRow[2];\n        squares[i + 3].innerHTML = newRow[3];\n      }\n    }\n  }\n\n  function moveLeft() {\n    for (let i = 0; i < BOARD_SIZE * ROW_SIZE; i++) {\n      if (i % ROW_SIZE === 0) {\n        const totalOne = squares[i].innerHTML;\n        const totalTwo = squares[i + 1].innerHTML;\n        const totalThree = squares[i + 2].innerHTML;\n        const totalFour = squares[i + 3].innerHTML;\n        const row = [parseInt(totalOne), parseInt(totalTwo), parseInt(totalThree), parseInt(totalFour)];\n\n        const filteredRow = row.filter(num => num);\n        const missing = ROW_SIZE - filteredRow.length;\n\n        const zeros = Array(missing).fill(0);\n\n        const newRow = filteredRow.concat(zeros);\n\n        squares[i].innerHTML = newRow[0];\n        squares[i + 1].innerHTML = newRow[1];\n        squares[i + 2].innerHTML = newRow[2];\n        squares[i + 3].innerHTML = newRow[3];\n      }\n    }\n  }\n\n  function moveUp() {\n    for (let i = 0; i < ROW_SIZE; i++) {\n      const totalOne = squares[i].innerHTML;\n      const totalTwo = squares[i + BOARD_SIZE].innerHTML;\n      const totalThree = squares[i + (BOARD_SIZE * 2)].innerHTML;\n      const totalFour = squares[i + (BOARD_SIZE * 3)].innerHTML;\n      const column = [parseInt(totalOne), parseInt(totalTwo), parseInt(totalThree), parseInt(totalFour)];\n\n      const filteredColumn = column.filter(num => num);\n      const missing = ROW_SIZE - filteredColumn.length;\n      const zeros = Array(missing).fill(0);\n      const newColumn = filteredColumn.concat(zeros);\n\n      squares[i].innerHTML = newColumn[0];\n      squares[i + BOARD_SIZE].innerHTML = newColumn[1];\n      squares[i + (BOARD_SIZE * 2)].innerHTML = newColumn[2];\n      squares[i + (BOARD_SIZE * 3)].innerHTML = newColumn[3];\n    }\n  }\n\n  function moveDown() {\n    for (let i = 0; i < ROW_SIZE; i++) {\n      const totalOne = squares[i].innerHTML;\n      const totalTwo = squares[i + BOARD_SIZE].innerHTML;\n      const totalThree = squares[i + (BOARD_SIZE * 2)].innerHTML;\n      const totalFour = squares[i + (BOARD_SIZE * 3)].innerHTML;\n      const column = [parseInt(totalOne), parseInt(totalTwo), parseInt(totalThree), parseInt(totalFour)];\n\n      const filteredColumn = column.filter(num => num);\n      const missing = 4 - filteredColumn.length;\n      const zeros = Array(missing).fill(0);\n      const newColumn = zeros.concat(filteredColumn);\n\n      squares[i].innerHTML = newColumn[0];\n      squares[i + BOARD_SIZE].innerHTML = newColumn[1];\n      squares[i + (BOARD_SIZE * 2)].innerHTML = newColumn[2];\n      squares[i + (BOARD_SIZE * 3)].innerHTML = newColumn[3];\n    }\n  }\n\n  function combineRow() {\n    for (let i = 0; i < (BOARD_SIZE * ROW_SIZE) - 1; i++) {\n      if (squares[i].innerHTML === squares[i + 1].innerHTML) {\n        const combinedTotal = parseInt(squares[i].innerHTML) + parseInt(squares[i + 1].innerHTML);\n\n        squares[i].innerHTML = combinedTotal;\n        squares[i + 1].innerHTML = '0';\n        score += combinedTotal;\n        scoreDisplay.innerHTML = score;\n      }\n    }\n    checkForWin();\n  }\n\n  function combineColumn() {\n    for (let i = 0; i < BOARD_SIZE * (ROW_SIZE - 1); i++) {\n      if (squares[i].innerHTML === squares[i + BOARD_SIZE].innerHTML) {\n        const combinedTotal = parseInt(squares[i].innerHTML) + parseInt(squares[i + BOARD_SIZE].innerHTML);\n\n        squares[i].innerHTML = combinedTotal;\n        squares[i + BOARD_SIZE].innerHTML = '0';\n        score += combinedTotal;\n        scoreDisplay.innerHTML = score;\n      }\n    }\n    checkForWin();\n  }\n\n  function control(e) {\n    switch (e.keyCode) {\n      case 37:\n        keyLeft();\n        break;\n      case 38:\n        keyUp();\n        break;\n      case 39:\n        keyRight();\n        break;\n      case 40:\n        keyDown();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  document.addEventListener('keyup', control);\n\n  function keyRight() {\n    const previousState = getGameState();\n\n    moveRight();\n    combineRow();\n    moveRight();\n\n    const currentState = getGameState();\n\n    if (!compareStates(previousState, currentState)) {\n      generate();\n    }\n  }\n\n  function keyLeft() {\n    const previousState = getGameState();\n\n    moveLeft();\n    combineRow();\n    moveLeft();\n\n    const currentState = getGameState();\n\n    if (!compareStates(previousState, currentState)) {\n      generate();\n    }\n  }\n\n  function keyUp() {\n    const previousState = getGameState();\n\n    moveUp();\n    combineColumn();\n    moveUp();\n\n    const currentState = getGameState();\n\n    if (!compareStates(previousState, currentState)) {\n      generate();\n    }\n  }\n\n  function keyDown() {\n    const previousState = getGameState();\n\n    moveDown();\n    combineColumn();\n    moveDown();\n\n    const currentState = getGameState();\n\n    if (!compareStates(previousState, currentState)) {\n      generate();\n    }\n  }\n\n  function checkForWin() {\n    for (let i = 0; i < squares.length; i++) {\n      const value = parseInt(squares[i].innerHTML);\n\n      if (value >= 2048) {\n        resultDisplay.innerHTML = 'You WIN';\n        document.removeEventListener('keyup', control);\n        setTimeout(() => clear(), 3000);\n        break;\n      }\n    }\n  }\n\n  function checkForGameOver() {\n    let zeros = 0;\n\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i].innerHTML === '0') {\n        zeros++;\n      }\n    }\n\n    if (zeros === 0 && !canMove()) {\n      resultDisplay.innerHTML = 'You LOSE, try again!';\n      document.removeEventListener('keyup', control);\n    }\n  }\n\n  function canMove() {\n    for (let i = 0; i < squares.length; i++) {\n      const currentSquare = squares[i].innerHTML;\n      const rightSquare = i % width < width - 1 ? squares[i + 1].innerHTML : null;\n      const leftSquare = i % width > 0 ? squares[i - 1].innerHTML : null;\n      const upSquare = i >= width ? squares[i - width].innerHTML : null;\n      const downSquare = i < width * (width - 1) ? squares[i + width].innerHTML : null;\n\n      if (\n        currentSquare === rightSquare\n        || currentSquare === leftSquare\n        || currentSquare === upSquare\n        || currentSquare === downSquare\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function clear() {\n    clearInterval(myTimer);\n  }\n\n  function addColours() {\n    for (let i = 0; i < squares.length; i++) {\n      const value = squares[i].innerHTML;\n\n      squares[i].style.backgroundColor = value === '0' ? getColor(value) : getColor(value);\n      squares[i].style.color = value === '0' ? 'transparent' : 'black';\n    }\n  }\n\n  function getColor(value) {\n    const colorMap = {\n      '2': '#eee4da',\n      '4': '#ede0c8',\n      '8': '#f2b179',\n      '16': '#ffcea4',\n      '32': '#e8c064',\n      '64': '#ffab6e',\n      '128': '#fd9982',\n      '256': '#ead79c',\n      '512': '#76daff',\n      '1024': '#beeaa5',\n      '2048': '#d7d4f0',\n    };\n\n    return colorMap[value] || '#afa192';\n  }\n\n  function getGameState() {\n    return squares.map(square => square.innerHTML);\n  }\n\n  function compareStates(state1, state2) {\n    return state1.join() === state2.join();\n  }\n\n  addColours();\n\n  function updateColors() {\n    addColours();\n\n    const currentState = getGameState();\n    const previousState = getGameState();\n\n    if (!compareStates(previousState, currentState)) {\n      setTimeout(() => {\n        generate();\n        addColours();\n      }, 200);\n    }\n  }\n\n  document.addEventListener('keyup', () => {\n    updateColors();\n  });\n\n  newGameButton.addEventListener('click', () => {\n    updateColors();\n  });\n\n  updateColors();\n});\n"]}